/* 
 * RIDB API Additional Functions 0.1
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchAvailabilityOkPayload {
  #[serde(rename = "permit_id")]
  permit_id: i32,
  #[serde(rename = "next_available_date")]
  next_available_date: String,
  #[serde(rename = "date_availability")]
  date_availability: ::std::collections::HashMap<String, ::models::SearchEntry>,
  #[serde(rename = "quota_type_maps")]
  quota_type_maps: ::models::SearchAvailabilityOkPayloadQuotaTypeMaps
}

impl SearchAvailabilityOkPayload {
  pub fn new(permit_id: i32, next_available_date: String, date_availability: ::std::collections::HashMap<String, ::models::SearchEntry>, quota_type_maps: ::models::SearchAvailabilityOkPayloadQuotaTypeMaps) -> SearchAvailabilityOkPayload {
    SearchAvailabilityOkPayload {
      permit_id: permit_id,
      next_available_date: next_available_date,
      date_availability: date_availability,
      quota_type_maps: quota_type_maps
    }
  }

  pub fn set_permit_id(&mut self, permit_id: i32) {
    self.permit_id = permit_id;
  }

  pub fn with_permit_id(mut self, permit_id: i32) -> SearchAvailabilityOkPayload {
    self.permit_id = permit_id;
    self
  }

  pub fn permit_id(&self) -> &i32 {
    &self.permit_id
  }


  pub fn set_next_available_date(&mut self, next_available_date: String) {
    self.next_available_date = next_available_date;
  }

  pub fn with_next_available_date(mut self, next_available_date: String) -> SearchAvailabilityOkPayload {
    self.next_available_date = next_available_date;
    self
  }

  pub fn next_available_date(&self) -> &String {
    &self.next_available_date
  }


  pub fn set_date_availability(&mut self, date_availability: ::std::collections::HashMap<String, ::models::SearchEntry>) {
    self.date_availability = date_availability;
  }

  pub fn with_date_availability(mut self, date_availability: ::std::collections::HashMap<String, ::models::SearchEntry>) -> SearchAvailabilityOkPayload {
    self.date_availability = date_availability;
    self
  }

  pub fn date_availability(&self) -> &::std::collections::HashMap<String, ::models::SearchEntry> {
    &self.date_availability
  }


  pub fn set_quota_type_maps(&mut self, quota_type_maps: ::models::SearchAvailabilityOkPayloadQuotaTypeMaps) {
    self.quota_type_maps = quota_type_maps;
  }

  pub fn with_quota_type_maps(mut self, quota_type_maps: ::models::SearchAvailabilityOkPayloadQuotaTypeMaps) -> SearchAvailabilityOkPayload {
    self.quota_type_maps = quota_type_maps;
    self
  }

  pub fn quota_type_maps(&self) -> &::models::SearchAvailabilityOkPayloadQuotaTypeMaps {
    &self.quota_type_maps
  }


}



