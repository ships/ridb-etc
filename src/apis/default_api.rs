/* 
 * RIDB API Additional Functions 0.1
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct DefaultApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl DefaultApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> DefaultApiClient {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn permit_division_search_availability(&self, permit_id: i32, division_id: i32, start_date: &str, end_date: &str, commercial_acct: bool, is_lottery: bool) -> Result<::models::SearchAvailabilityOk, Error>;
}


impl DefaultApi for DefaultApiClient {
    fn permit_division_search_availability(&self, permit_id: i32, division_id: i32, start_date: &str, end_date: &str, commercial_acct: bool, is_lottery: bool) -> Result<::models::SearchAvailabilityOk, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("start_date", &start_date.to_string());
            query.append_pair("end_date", &end_date.to_string());
            query.append_pair("commercial_acct", &commercial_acct.to_string());
            query.append_pair("is_lottery", &is_lottery.to_string());

            query.finish()
        };
        let uri_str = format!("{}/permits/{permitId}/divisions/{divisionId}/availability?{}", configuration.base_path, query_string, permitId=permit_id, divisionId=division_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }




        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
